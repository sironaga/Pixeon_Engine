===============================================================================
                          Pixeon Engine プログラム仕様書
                                  バージョン 1.0
===============================================================================

1. プロジェクト概要
===============================================================================

Pixeon Engine は DirectX11 ベースのゲームエンジンで、以下の4つの主要コンポーネント
から構成されています：

1. Pixeon_Engine.dll - メインエンジン DLL
2. Exe - ゲームランチャーアプリケーション  
3. Asset packaging tool - アセットパッキングツール
4. cmd - コマンドラインツール

プロジェクトは合計 777 個のソースファイル(.h/.cpp)を含み、ImGUI ベースのエディタ機能
を搭載したゲーム開発環境を提供します。

2. アーキテクチャ概要
===============================================================================

2.1 システム構成
-------------------------------------------------------------------------------
- DirectX11 レンダリングシステム
- シングルトンパターンベースの管理クラス群
- コンポーネントベースのオブジェクトシステム
- アセット管理システム（パッキング対応）
- シーン管理システム
- 統合開発環境（エディタ GUI）

2.2 主要な設計パターン
-------------------------------------------------------------------------------
- Singleton パターン：各種マネージャークラス
- Component パターン：ゲームオブジェクト構成
- Factory パターン：コンポーネント生成
- Observer パターン：アセット監視

3. プログラムフロー詳細
===============================================================================

3.1 アプリケーション起動フロー
-------------------------------------------------------------------------------

【Exe/Main.cpp - エントリーポイント】
1. WinMain() 実行開始
   ↓
2. Engine.dll（Pixeon_Engine.dll）の動的ロード
   - LoadLibrary("Pixeon_Engine.dll")
   - エンジン関数のアドレス取得
     * SoftInit (初期化)
     * SoftUpdate (更新)
     * SoftDraw (描画)
     * SoftShutDown (終了処理)
     * IsEngineRunning (実行状態)
     * EngineProc (ウィンドウメッセージ)
   ↓
3. ウィンドウクラス登録・作成
   - 16:9 アスペクト比固定
   - リサイズ時アスペクト比保持
   ↓
4. エンジン初期化
   - EngineConfig 構成
     * 画面サイズ：1920x1080
     * フルスクリーン設定
     * FPS設定：60.0f
   - EngineInit(config) 呼び出し
   ↓
5. メインループ開始
   - Windows メッセージ処理
   - EngineUpdate() 呼び出し
   - EngineDraw() 呼び出し
   ↓
6. 終了処理
   - EngineShutdown()
   - ウィンドウ破棄
   - DLL 解放

3.2 エンジン初期化フロー（StartUp.cpp → Main.cpp）
-------------------------------------------------------------------------------

【StartUp.cpp - DLL エクスポート関数】
SoftInit(EngineConfig) → Init(EngineConfig) 呼び出し

【Main.cpp - Init() 関数】
1. DirectX11 初期化
   - DirectX11::GetInstance()->Init()
   - スワップチェーン作成
   - デバイス・コンテキスト作成
   - レンダーターゲット・深度ステンシル作成
   - ラスタライザー・ブレンド・サンプラーステート設定
   ↓
2. 設定管理初期化
   - SettingManager::GetInstance()->LoadConfig()
   - JSON設定ファイル読み込み（SceneRoot/config/config.json）
   - アセットパス、シーンパス等設定読み込み
   ↓
3. アセット管理初期化
   - AssetsManager::GetInstance()
   - LoadMode を FromSource に設定
   - アセットキャッシュ作成
   - AssetWatcher による変更監視開始
   - OnAssetChanged コールバック登録
   ↓
4. レンダリングターゲット初期化
   - GameRenderTarget 作成・初期化
   - エディタ用レンダーターゲット設定
   ↓
5. GUI システム初期化
   - EditrGUI::GetInstance()->Init()
   - ImGui コンテキスト作成
   - DirectX11 連携設定
   - 日本語フォント設定
   ↓
6. シーンマネージャー初期化
   - SceneManger::GetInstance()->Init()
   - シーンファイル一覧取得
   - デフォルトシーン("SampleScene")読み込み
   ↓
7. シェーダーマネージャー初期化
   - ShaderManager::GetInstance()->Initialize()
   - HLSL シェーダーコンパイル準備

3.3 メインループフロー（Update/Draw）
-------------------------------------------------------------------------------

【Update フェーズ】
Update() → bInGame 状態により分岐

■ エディタモード（bInGame = false）
EditeUpdate():
1. シェーダー更新・コンパイル
   - ShaderManager::UpdateAndCompileShaders()
   ↓
2. エディタGUI更新  
   - EditrGUI::GetInstance()->Update()
   - ImGui フレーム処理
   - ヒエラルキー・インスペクター・コンテンツビュー更新
   ↓
3. シーン編集更新
   - SceneManger::GetInstance()->EditUpdate()
   - オブジェクト編集処理

■ ゲームプレイモード（bInGame = true）  
InGameUpdate():
1. ゲームロジック更新
   - SceneManger::GetInstance()->PlayUpdate()
   - オブジェクトコンポーネント更新処理

【Draw フェーズ】
Draw() → 常時 EditeDraw() 実行

EditeDraw():
1. ゲームレンダーターゲットへの描画
   - gGameRenderTarget->Begin()
   - SceneManger::GetInstance()->Draw()
   - ゲームシーン描画
   - gGameRenderTarget->End()
   ↓
2. エディタUI描画
   - DirectX11::BeginDraw() - 背景クリア
   - EditrGUI::GetInstance()->Draw()
   - ImGui レンダリング（ゲームビューを含む）
   - DirectX11::EndDraw() - スワップチェーン表示

3.4 シーン管理フロー
-------------------------------------------------------------------------------

【SceneManger.cpp】
1. Init() - 初期化
   - ListSceneFiles() でシーンファイル検索
   - CreateAndRegisterScene() で各シーン生成・登録
   - デフォルトシーン切り替え
   ↓
2. BeginPlay() - ゲーム開始
   - 現在シーンの保存
   - シーン BeginPlay() 実行
   ↓  
3. EditUpdate() / PlayUpdate() - 更新
   - エディットモード：編集機能更新
   - プレイモード：ゲームロジック実行
   ↓
4. Draw() - 描画
   - シーン内全オブジェクト描画処理

3.5 オブジェクト・コンポーネントシステム
-------------------------------------------------------------------------------

【Object.cpp】
- Init() - オブジェクト初期化
- BeginPlay() - 全コンポーネント BeginPlay() 実行
- EditUpdate() / InGameUpdate() - コンポーネント更新
- Draw() - 全コンポーネント描画
- UInit() - 終了処理・メモリ解放
- Clone() - オブジェクト複製
- GetComponent() - 名前によるコンポーネント検索
- AddComponent() / RemoveComponent() - コンポーネント管理

【ComponentManager.cpp】
- AddComponent() - タイプ別コンポーネント生成
- ファクトリーパターンでコンポーネント生成

3.6 アセット管理フロー  
-------------------------------------------------------------------------------

【AssetsManager.cpp】
1. SetLoadMode() - ロードモード設定
   - FromSource: ソースファイルから直接読み込み
   - FromArchive: パッキング済みアーカイブから読み込み
   ↓
2. CacheAsset() - アセットキャッシュ
   - ファイル変更検知時の自動キャッシュ更新
   ↓
3. LoadAsset() - アセット読み込み
   - キャッシュ優先読み込み
   - アーカイブまたはソースファイルアクセス
   ↓
4. AssetWatcher - ファイル監視
   - OnAssetChanged コールバック
   - 自動リロード機能

【Asset packaging tool/main.cpp - パッキングツール】
1. コマンドライン引数解析
   - 入力ディレクトリ
   - 出力.PixAssetsファイル
   ↓
2. ファイル列挙・パッキング
   - ListFiles() でファイル一覧作成
   - バイナリ形式でアーカイブ作成
   - エントリテーブル・データ部構成

3.7 描画システムフロー
-------------------------------------------------------------------------------

【System.cpp - DirectX11 クラス】
1. Init() - DirectX11初期化
   - デバイス・スワップチェーン作成
   - レンダーターゲット・深度バッファ作成
   - 各種ステート作成（ブレンド・ラスタライザー・サンプラー）
   ↓
2. BeginDraw() - 描画開始
   - レンダーターゲットクリア
   - 深度バッファクリア
   ↓
3. EndDraw() - 描画終了
   - スワップチェーン Present()
   ↓
4. OnResize() - リサイズ処理
   - ImGui デバイスオブジェクト無効化
   - レンダーターゲット・深度バッファ再作成
   - ImGui デバイスオブジェクト再作成

【GameRenderTarget.cpp】
- ゲーム画面専用レンダーターゲット
- エディタビューポート表示用

3.8 エディタGUIフロー
-------------------------------------------------------------------------------

【EditrGUI.cpp】
1. Init() - 初期化
   - ImGui コンテキスト作成
   - Docking・Viewport機能有効化
   - 日本語フォント読み込み
   - DirectX11連携初期化
   ↓
2. Update() - 更新
   - ImGui フレーム開始
   - 各種ウィンドウパネル更新
   ↓
3. Draw() - 描画  
   - ImGui レンダリング実行

【各種エディタコンテンツ】
- EditrGUI_Hierarchy.cpp - ヒエラルキービュー
- EditrGUI_Inspector.cpp - インスペクタービュー  
- EditrGUI_Content.cpp - コンテンツブラウザ

3.9 設定管理フロー
-------------------------------------------------------------------------------

【SettingManager.cpp】
1. LoadConfig() - 設定読み込み
   - config.json ファイル解析
   - 各種パス・設定値読み込み
   ↓
2. SaveConfig() - 設定保存
   - 現在設定をJSONで保存

設定項目：
- AssetsFilePath - アセットディレクトリパス
- ArchiveFilePath - アーカイブファイルパス  
- SceneFilePath - シーンファイルパス
- ZBuffer設定
- 自動保存間隔等

3.10 シェーダー管理フロー
-------------------------------------------------------------------------------

【ShaderManager.cpp】
1. Initialize() - 初期化
   - DirectX11デバイス登録
   - 既存シェーダーコンパイル
   ↓
2. UpdateAndCompileShaders() - 更新・コンパイル
   - HLSLファイル監視
   - 変更時自動コンパイル
   ↓
3. CreateHLSLTemplate() - テンプレート作成
   - 頂点シェーダー・ピクセルシェーダーテンプレート生成

4. 終了処理フロー
===============================================================================

【UnInit() 関数 - Main.cpp】
1. アセット監視停止
   - watcher->Stop()
   - AssetWatcher削除
   ↓
2. 各種マネージャー終了処理
   - AssetsManager::ClearCache() → DestroyInstance()
   - SceneManger::Save() → DestroyInstance()  
   - SettingManager::SaveConfig() → DestroyInstance()
   ↓
3. DirectX11終了処理
   - DirectX11::DestroyInstance()
   - 各種リソース解放

5. エラーハンドリング
===============================================================================

5.1 初期化エラー
-------------------------------------------------------------------------------
- DLL読み込み失敗
- DirectX11初期化失敗
- ウィンドウ作成失敗
→ MessageBox でエラー表示後、アプリケーション終了

5.2 実行時エラー  
-------------------------------------------------------------------------------
- アセット読み込み失敗
- シーン切り替えエラー
- シェーダーコンパイルエラー
→ ログ出力・MessageBox表示・継続実行

6. メモリ管理
===============================================================================

6.1 リソース管理
-------------------------------------------------------------------------------
- SAFE_DELETE / SAFE_RELEASE マクロ使用
- RAII パターンによる自動管理
- スマートポインター（一部使用）

6.2 シングルトン管理
-------------------------------------------------------------------------------
- 各マネージャークラスは DestroyInstance() で確実に解放
- 終了時の適切な順序で解放実行

7. 拡張性・カスタマイズ
===============================================================================

7.1 コンポーネントシステム
-------------------------------------------------------------------------------
- Component基底クラス継承で新規コンポーネント追加可能
- ComponentManager でファクトリー登録

7.2 アセットタイプ  
-------------------------------------------------------------------------------
- AssetsManager でカスタムローダー追加可能
- アーカイブ形式は拡張可能

7.3 エディタ拡張
-------------------------------------------------------------------------------
- ImGui ベースで新規パネル追加容易
- プラグインシステムも実装可能

===============================================================================
                              仕様書終了
===============================================================================

作成日：2024年
作成者：Pixeon Engine Analysis System
ファイル形式：UTF-8 テキスト