Pixeon_Engine セーブ・ロード機能における例外スロー問題の原因分析と修正

==============================================================================
1. 主要な問題 (Critical Issues) - 修正完了
==============================================================================

1.1 パス構築の不整合 (Path Construction Inconsistency) - 修正済み ✅
-----------------------------------------------------
場所: Scene.cpp line 166 vs line 175

修正前の問題:
SaveToFile(): 
  File = SettingManager::GetInstance()->GetSceneFilePath() + _name + ".scene";
LoadToFile():
  std::string filePath = SettingManager::GetInstance()->GetSceneFilePath() + "/" + _name + ".scene";

問題: SaveToFileでは"/"セパレータがないが、LoadToFileでは"/"が追加されている。
結果: 保存されたファイルを読み込めないため、ifstream::open()が失敗する。

修正内容:
- 両方のメソッドで統一されたパス構築ロジックを実装
- パス区切り文字の自動追加機能を追加
- パステストで一致性を確認済み

1.2 ディレクトリ存在チェックの欠如 (Missing Directory Existence Check) - 修正済み ✅
--------------------------------------------------------------------
場所: SettingManager.cpp line 77, Scene.cpp line 167

修正前の問題: 
- CONFIG_FILE_PATH ("SceneRoot/config/config.json") のディレクトリが存在しない場合
- シーンファイル保存先ディレクトリが存在しない場合

修正内容:
- std::filesystem::create_directories()による自動ディレクトリ作成
- ディレクトリ作成失敗時の適切なエラーハンドリング
- filesystem_errorの例外処理を追加

1.3 JSON解析例外の未処理 (Unhandled JSON Parsing Exceptions) - 修正済み ✅
------------------------------------------------------------
場所: SettingManager.cpp line 36, Scene.cpp line 183

修正前の問題:
- nlohmann::json::parse() は不正なJSONで例外をスローする
- configFile >> configJson; で破損したJSONファイルを読むと例外発生
- sceneData["SceneSettings"]["Name"] で存在しないキーアクセス時の例外

修正内容:
- 包括的なtry-catchブロックで全JSON操作を保護
- JSONスキーマの妥当性チェックを追加
- 各種JSON例外タイプの個別ハンドリング
- 破損データでも安全にフォールバックする仕組み

1.4 ファイルストリーム状態の未チェック (Unchecked File Stream States) - 修正済み ✅
--------------------------------------------------------------------
場所: Scene.cpp line 169-171

修正前の問題:
outFile << SceneData.dump(4); 
でストリーム書き込みエラーが発生してもチェックしていない。

修正内容:
- ファイルストリーム状態の明示的チェック
- 書き込み失敗時の適切なエラー表示
- リソースリークを防ぐ適切なファイルクローズ処理

==============================================================================
2. 潜在的な問題 (Potential Issues) - 修正完了
==============================================================================

2.1 メモリリークとリソース管理 (Memory Leaks and Resource Management) - 修正済み ✅
--------------------------------------------------------------------
場所: Scene.cpp line 190, 206

修正前の問題: 
- newObj = new Object(); でオブジェクト作成後、例外発生時のメモリリーク
- newComp = ComponentManager::GetInstance()->AddComponent() 失敗時の処理

修正内容:
- RAII原則に基づく例外安全なオブジェクト管理
- try-catchブロック内での適切なメモリ解放
- 例外発生時のnullptrチェックとdelete処理

2.2 型変換例外 (Type Conversion Exceptions) - 修正済み ✅
-------------------------------------------
場所: Scene.cpp line 197-199, 204

修正前の問題:
- pos[0].get<float>() で配列要素が存在しないか不正な型の場合
- compData["Type"].get<int>() でenumキャストが無効な値の場合

修正内容:
- JSONデータの存在確認と型チェック
- 配列サイズの妥当性検証
- 安全な型変換処理

==============================================================================
3. 実装した修正方法 (Implemented Fixes)
==============================================================================

3.1 パス構築の統一
- SaveToFile()とLoadToFile()で一貫したパス区切り文字を使用
- 自動パス区切り文字追加機能の実装

3.2 例外処理の追加
- try-catchブロックでJSON操作を囲む
- nlohmann::json::exception の個別キャッチ
- std::filesystem::filesystem_error の処理

3.3 ディレクトリ作成の実装
- std::filesystem::create_directories() でディレクトリを事前作成
- 作成失敗時の適切なエラー表示

3.4 エラーハンドリングの強化
- ファイルストリーム状態のチェック
- MessageBoxによる適切なエラーメッセージの表示
- 警告レベルとエラーレベルの区別

==============================================================================
4. 修正結果の検証 (Verification Results)
==============================================================================

4.1 パス構築テスト結果:
修正前: SaveFile="SceneRoot/SceneTestScene.scene", LoadFile="SceneRoot/Scene/TestScene.scene" (不一致)
修正後: SaveFile="SceneRoot/Scene/TestScene.scene", LoadFile="SceneRoot/Scene/TestScene.scene" (一致)

4.2 例外安全性:
- JSON解析エラーでクラッシュしない
- ファイルアクセスエラーで適切なメッセージ表示
- メモリリークなし

4.3 互換性:
- 既存の正常なファイルは引き続き読み込み可能
- 新しいファイル形式との互換性維持

==============================================================================
5. 影響範囲 (Impact Scope) - 修正後
==============================================================================

修正前:
高: Scene.cpp のパス不整合問題 - 必ずロード失敗を引き起こす
高: JSON解析例外 - アプリケーションクラッシュの原因  
中: ディレクトリ存在問題 - 初回実行時や環境移行時の問題
低: エンコーディング問題 - 特定の文字使用時のみ

修正後:
なし: 全ての重大な問題が修正済み
低: 一部の極端なエッジケース（ディスク容量0など）のみ残存

==============================================================================
6. 今後の推奨事項 (Future Recommendations)
==============================================================================

6.1 単体テストの追加
- JSONファイル破損時のテスト
- ディスク容量不足時のテスト
- 不正なファイルパス指定時のテスト

6.2 ログ機能の強化
- ファイル操作の詳細ログ
- 例外発生時のスタックトレース

6.3 バックアップ機能
- 自動バックアップ生成
- 破損ファイル検出時の自動復旧

==============================================================================
修正完了日: 2024年
修正対象ファイル:
- Pixeon_Engine/Scene.cpp
- Pixeon_Engine/SettingManager.cpp
==============================================================================