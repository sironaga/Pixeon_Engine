Pixeon_Engine セーブ・ロード機能における例外スロー問題の原因分析

==============================================================================
1. 主要な問題 (Critical Issues)
==============================================================================

1.1 パス構築の不整合 (Path Construction Inconsistency)
-----------------------------------------------------
場所: Scene.cpp line 166 vs line 175

SaveToFile(): 
  File = SettingManager::GetInstance()->GetSceneFilePath() + _name + ".scene";

LoadToFile():
  std::string filePath = SettingManager::GetInstance()->GetSceneFilePath() + "/" + _name + ".scene";

問題: SaveToFileでは"/"セパレータがないが、LoadToFileでは"/"が追加されている。
結果: 保存されたファイルを読み込めないため、ifstream::open()が失敗する。

1.2 ディレクトリ存在チェックの欠如 (Missing Directory Existence Check)
--------------------------------------------------------------------
場所: SettingManager.cpp line 77, Scene.cpp line 167

問題: 
- CONFIG_FILE_PATH ("SceneRoot/config/config.json") のディレクトリが存在しない場合
- シーンファイル保存先ディレクトリが存在しない場合

結果: ofstream::open()でディレクトリが存在しない場合、ファイル作成に失敗し、
     サイレント失敗またはストリーム状態の異常が発生する可能性がある。

1.3 JSON解析例外の未処理 (Unhandled JSON Parsing Exceptions)
------------------------------------------------------------
場所: SettingManager.cpp line 36, Scene.cpp line 183

問題:
- nlohmann::json::parse() は不正なJSONで例外をスローする
- configFile >> configJson; で破損したJSONファイルを読むと例外発生
- sceneData["SceneSettings"]["Name"] で存在しないキーアクセス時の例外

結果: json::parse_error, json::type_error, json::out_of_range例外が
     キャッチされずにプログラムクラッシュを引き起こす。

1.4 ファイルストリーム状態の未チェック (Unchecked File Stream States)
--------------------------------------------------------------------
場所: Scene.cpp line 169-171

問題:
outFile << SceneData.dump(4); 
でストリーム書き込みエラーが発生してもチェックしていない。

結果: ディスク容量不足やアクセス権限不足で書き込み失敗時に
     不完全なファイルが生成される可能性がある。

==============================================================================
2. 潜在的な問題 (Potential Issues)
==============================================================================

2.1 文字エンコーディング問題 (Character Encoding Issues)
--------------------------------------------------------
場所: Scene.cpp line 186

問題: _name = sceneData["SceneSettings"]["Name"].get<std::string>();
日本語を含むシーン名での文字化けや不正文字による例外の可能性。

2.2 メモリリークとリソース管理 (Memory Leaks and Resource Management)
--------------------------------------------------------------------
場所: Scene.cpp line 190, 206

問題: 
- newObj = new Object(); でオブジェクト作成後、例外発生時のメモリリーク
- newComp = ComponentManager::GetInstance()->AddComponent() 失敗時の処理

2.3 スレッドセーフティ問題 (Thread Safety Issues)
------------------------------------------------
場所: SceneManger.cpp line 42, 54, 76

問題: SaveToFile()の呼び出しが複数スレッドから同時に行われる可能性
結果: ファイル書き込み競合やデータ破損の可能性

2.4 型変換例外 (Type Conversion Exceptions) 
-------------------------------------------
場所: Scene.cpp line 197-199, 204

問題:
- pos[0].get<float>() で配列要素が存在しないか不正な型の場合
- compData["Type"].get<int>() でenumキャストが無効な値の場合

==============================================================================
3. 推奨される修正方法 (Recommended Fixes)
==============================================================================

3.1 パス構築の統一
- SaveToFile()とLoadToFile()で一貫したパス区切り文字を使用
- std::filesystem::path を使用した安全なパス結合

3.2 例外処理の追加
- try-catchブロックでJSON操作を囲む
- ファイル操作の戻り値チェック

3.3 ディレクトリ作成の実装
- std::filesystem::create_directories() でディレクトリを事前作成

3.4 エラーハンドリングの強化
- ファイルストリーム状態のチェック
- 適切なエラーメッセージの表示

==============================================================================
4. 影響範囲 (Impact Scope)
==============================================================================

高: Scene.cpp のパス不整合問題 - 必ずロード失敗を引き起こす
高: JSON解析例外 - アプリケーションクラッシュの原因
中: ディレクトリ存在問題 - 初回実行時や環境移行時の問題
低: エンコーディング問題 - 特定の文字使用時のみ

==============================================================================
5. 検証方法 (Verification Methods)
==============================================================================

1. 新しいシーンを作成して保存し、再読み込みテスト
2. config.jsonを破損させて起動テスト
3. SceneRootディレクトリを削除して動作テスト
4. 日本語名のシーンファイルでのテスト
5. 同時セーブ操作のストレステスト